
import * as fs from 'fs';
import * as path from 'path';

interface ComponentUsage {
  component: string;
  importPath: string;
  files: string[];
  mantineEquivalent: string;
  migrationComplexity: 'low' | 'medium' | 'high';
}

const COMPONENT_MAPPING: Record<string, { mantine: string; complexity: ComponentUsage['migrationComplexity'] }> = {
  'Button': { mantine: '@mantine/core Button', complexity: 'low' },
  'Input': { mantine: '@mantine/core TextInput', complexity: 'low' },
  'Textarea': { mantine: '@mantine/core Textarea', complexity: 'low' },
  'Select': { mantine: '@mantine/core Select', complexity: 'medium' },
  'Card': { mantine: '@mantine/core Card', complexity: 'low' },
  'Badge': { mantine: '@mantine/core Badge', complexity: 'low' },
  'Table': { mantine: '@mantine/core Table + ScrollArea', complexity: 'medium' },
  'Dialog': { mantine: '@mantine/core Modal', complexity: 'high' },
  'DropdownMenu': { mantine: '@mantine/core Menu', complexity: 'medium' },
  'Tooltip': { mantine: '@mantine/core Tooltip', complexity: 'low' },
  'Switch': { mantine: '@mantine/core Switch', complexity: 'low' },
  'Checkbox': { mantine: '@mantine/core Checkbox', complexity: 'low' },
  'Tabs': { mantine: '@mantine/core Tabs', complexity: 'low' },
  'Accordion': { mantine: '@mantine/core Accordion', complexity: 'low' },
  'Progress': { mantine: '@mantine/core Progress', complexity: 'low' },
  'Separator': { mantine: '@mantine/core Divider', complexity: 'low' },
};

function scanDirectory(dir: string): ComponentUsage[] {
  const results: ComponentUsage[] = [];
  const componentUsage: Record<string, Set<string>> = {};

  function scanFile(filePath: string) {
    if (!filePath.endsWith('.tsx') && !filePath.endsWith('.ts')) return;
    
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Check for shadcn/ui imports
    const shadcnImportRegex = /import\s+{([^}]+)}\s+from\s+['"]@\/components\/ui\/([^'"]+)['"]/g;
    let match;
    
    while ((match = shadcnImportRegex.exec(content)) !== null) {
      const components = match[1].split(',').map(c => c.trim());
      const importPath = `@/components/ui/${match[2]}`;
      
      components.forEach(component => {
        if (!componentUsage[component]) {
          componentUsage[component] = new Set();
        }
        componentUsage[component].add(filePath);
      });
    }

    // Check for Radix imports
    const radixImportRegex = /import\s+[^'"]*from\s+['"]@radix-ui\/([^'"]+)['"]/g;
    while ((match = radixImportRegex.exec(content)) !== null) {
      const radixComponent = match[1];
      if (!componentUsage[`Radix-${radixComponent}`]) {
        componentUsage[`Radix-${radixComponent}`] = new Set();
      }
      componentUsage[`Radix-${radixComponent}`].add(filePath);
    }
  }

  function walkDirectory(currentDir: string) {
    const entries = fs.readdirSync(currentDir);
    
    for (const entry of entries) {
      const fullPath = path.join(currentDir, entry);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !entry.startsWith('.') && entry !== 'node_modules') {
        walkDirectory(fullPath);
      } else if (stat.isFile()) {
        scanFile(fullPath);
      }
    }
  }

  walkDirectory(dir);

  // Convert to results format
  Object.entries(componentUsage).forEach(([component, files]) => {
    const mapping = COMPONENT_MAPPING[component];
    results.push({
      component,
      importPath: component.startsWith('Radix-') ? `@radix-ui/${component.slice(6)}` : `@/components/ui/${component.toLowerCase()}`,
      files: Array.from(files),
      mantineEquivalent: mapping?.mantine || 'Manual migration required',
      migrationComplexity: mapping?.complexity || 'high'
    });
  });

  return results.sort((a, b) => a.component.localeCompare(b.component));
}

function generateAuditReport(results: ComponentUsage[]): string {
  const date = new Date().toISOString().split('T')[0].replace(/-/g, '');
  
  let report = `# Component Audit Report - ${date}\n\n`;
  report += `Generated by scripts/component-audit.ts\n\n`;
  report += `## Summary\n\n`;
  report += `- Total components found: ${results.length}\n`;
  report += `- Low complexity: ${results.filter(r => r.migrationComplexity === 'low').length}\n`;
  report += `- Medium complexity: ${results.filter(r => r.migrationComplexity === 'medium').length}\n`;
  report += `- High complexity: ${results.filter(r => r.migrationComplexity === 'high').length}\n\n`;
  
  report += `## Components by Migration Complexity\n\n`;
  
  ['low', 'medium', 'high'].forEach(complexity => {
    const components = results.filter(r => r.migrationComplexity === complexity);
    if (components.length > 0) {
      report += `### ${complexity.toUpperCase()} Complexity\n\n`;
      components.forEach(comp => {
        report += `- **${comp.component}** â†’ ${comp.mantineEquivalent}\n`;
        report += `  - Used in ${comp.files.length} files\n`;
        report += `  - Import: \`${comp.importPath}\`\n\n`;
      });
    }
  });

  report += `## Detailed File Usage\n\n`;
  results.forEach(comp => {
    report += `### ${comp.component}\n\n`;
    report += `- **Mantine Equivalent:** ${comp.mantineEquivalent}\n`;
    report += `- **Complexity:** ${comp.migrationComplexity}\n`;
    report += `- **Files using this component:**\n\n`;
    comp.files.forEach(file => {
      report += `  - ${file}\n`;
    });
    report += '\n';
  });

  return report;
}

// Run audit
const results = scanDirectory('./src');
const report = generateAuditReport(results);

// Write report
const date = new Date().toISOString().split('T')[0].replace(/-/g, '');
const reportPath = `./docs/component-audit-${date}.md`;
fs.writeFileSync(reportPath, report);

console.log(`Component audit complete. Report written to ${reportPath}`);
console.log(`Found ${results.length} components to migrate.`);

export { scanDirectory, generateAuditReport };
