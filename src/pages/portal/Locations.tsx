
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { toast } from "sonner";
import LocationCard, { LocationProps } from '@/components/locations/LocationCard';
import LocationForm, { LocationFormData } from '@/components/locations/LocationForm';

// This would come from the database in a real application
// just using mock data for now
const MOCK_LOCATIONS: LocationProps[] = [];

const PortalLocations: React.FC = () => {
  const [locations, setLocations] = useState<LocationProps[]>(MOCK_LOCATIONS);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [currentLocation, setCurrentLocation] = useState<LocationFormData | undefined>();

  const handleAddLocation = () => {
    setCurrentLocation(undefined);
    setIsFormOpen(true);
  };

  const handleEditLocation = (id: string) => {
    const locationToEdit = locations.find(loc => loc.id === id);
    if (locationToEdit) {
      setCurrentLocation({
        ...locationToEdit,
        isActive: locationToEdit.isActive ?? true
      });
      setIsFormOpen(true);
    }
  };

  const handleDeleteLocation = (id: string) => {
    // In a real application, you would call an API to delete the location
    setLocations(locations.filter(loc => loc.id !== id));
    toast.success('Location deleted successfully');
  };

  const handleFormSubmit = (data: LocationFormData) => {
    if (data.id) {
      // Update existing location
      setLocations(locations.map(loc => 
        loc.id === data.id ? { ...data, id: data.id } : loc
      ));
      toast.success('Location updated successfully');
    } else {
      // Add new location
      const newLocation = {
        ...data,
        id: `loc-${Date.now()}`, // In a real app, this would be generated by the database
      };
      setLocations([...locations, newLocation]);
      toast.success('Location added successfully');
    }
    setIsFormOpen(false);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold tracking-tight">Locations</h1>
        <Button onClick={handleAddLocation}>
          <Plus className="h-4 w-4 mr-2" />
          Add Location
        </Button>
      </div>

      {locations.length > 0 ? (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {locations.map((location) => (
            <LocationCard 
              key={location.id} 
              {...location}
              onEdit={handleEditLocation}
              onDelete={handleDeleteLocation}
            />
          ))}
        </div>
      ) : (
        <div className="rounded-md border">
          <div className="p-6 flex items-center justify-center">
            <p className="text-muted-foreground">No locations found. Add your first location to get started.</p>
          </div>
        </div>
      )}

      <LocationForm 
        open={isFormOpen}
        initialData={currentLocation}
        onClose={() => setIsFormOpen(false)}
        onSubmit={handleFormSubmit}
      />
    </div>
  );
};

export default PortalLocations;
